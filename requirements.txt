# =====================================================
# COMPREHENSIVE DEPENDENCY SPECIFICATIONS
# Email-Customer Analytics and Anonymization Pipeline
# =====================================================

# What: Complete dependency list for enterprise-grade email analytics pipeline
# Why: Ensures reproducible environment with specific versions for stability
# How: Organized by functionality with detailed explanations for each package
# Alternative: Could use poetry or pipenv, but requirements.txt is more universal

# =====================================================
# CORE DATA PROCESSING PACKAGES
# =====================================================

# pandas: Industry standard data manipulation and analysis library
# What: Comprehensive data structures and analysis tools
# Why: Excellent performance for medium datasets, extensive ecosystem, great documentation
# How: Provides DataFrame/Series for structured data operations
# Alternative: Polars (faster), Dask (distributed), but pandas has best compatibility
pandas>=2.3.0

# numpy: Fundamental package for scientific computing
# What: Multi-dimensional arrays and mathematical functions
# Why: Foundation for pandas and scikit-learn, optimized C implementations
# How: Provides efficient numerical operations and array handling
# Alternative: CuPy (GPU acceleration), but numpy is universal standard
numpy>=2.3.1

# =====================================================
# DATABASE AND PERSISTENCE
# =====================================================

# SQLAlchemy: SQL toolkit and Object-Relational Mapping (ORM) library
# What: Database abstraction layer with ORM capabilities
# Why: Database-agnostic code, excellent Python integration, mature ecosystem
# How: Provides database connection pooling, query building, and ORM mapping
# Alternative: Django ORM (web-focused), raw database drivers (less abstraction)
sqlalchemy>=2.0.41

# psycopg2-binary: PostgreSQL adapter for Python
# What: High-performance PostgreSQL database connectivity
# Why: Most efficient PostgreSQL driver, excellent performance, wide adoption
# How: Provides native PostgreSQL protocol implementation
# Alternative: asyncpg (async), psycopg3 (newer), but psycopg2 is most stable
psycopg2-binary>=2.9.10

# =====================================================
# API AND WEB INTEGRATION
# =====================================================

# requests: HTTP library for API interactions
# What: Simple, elegant HTTP client for Python
# Why: Excellent error handling, intuitive API, comprehensive feature set
# How: Provides HTTP methods, session management, and authentication
# Alternative: httpx (async support), urllib3 (lower level), but requests is most user-friendly
requests>=2.32.4

# =====================================================
# MACHINE LEARNING AND ANALYTICS
# =====================================================

# scikit-learn: Machine learning library for Python
# What: Comprehensive ML algorithms and utilities
# Why: Well-tested implementations, consistent API, excellent documentation
# How: Provides classification, regression, clustering, and preprocessing tools
# Alternative: TensorFlow/PyTorch (deep learning), but scikit-learn is perfect for traditional ML
scikit-learn>=1.3.0

# fuzzywuzzy: Fuzzy string matching library
# What: String similarity and fuzzy matching algorithms
# Why: Fast, interpretable fuzzy matching with multiple algorithms
# How: Provides ratio, partial ratio, and token-based matching
# Alternative: rapidfuzz (faster), difflib (built-in), but fuzzywuzzy has best balance
fuzzywuzzy>=0.18.0

# python-Levenshtein: Fast Levenshtein distance computation
# What: Optimized edit distance calculations
# Why: Significantly speeds up fuzzywuzzy operations
# How: Provides C-based implementations of string distance algorithms
# Alternative: Built-in difflib, but python-Levenshtein is much faster
python-Levenshtein>=0.21.0

# =====================================================
# NATURAL LANGUAGE PROCESSING
# =====================================================

# transformers: State-of-the-art Natural Language Processing
# What: Pre-trained transformer models for NLP tasks
# Why: Best-in-class translation models, extensive model library
# How: Provides MarianMT for Korean-English translation
# Alternative: Google Translate API (requires internet), OpenAI API (expensive)
transformers>=4.30.0

# torch: PyTorch deep learning framework
# What: Tensor computation library with GPU acceleration
# Why: Required for transformers, excellent GPU support, dynamic computation graphs
# How: Provides neural network building blocks and automatic differentiation
# Alternative: TensorFlow (Google), JAX (Google Research), but PyTorch is most popular
torch>=2.0.0

# sentencepiece: Unsupervised text tokenizer
# What: Subword tokenization for neural language models
# Why: Required for many transformer models, handles multiple languages
# How: Provides BPE and unigram tokenization algorithms
# Alternative: tiktoken (OpenAI), but sentencepiece is more universal
sentencepiece>=0.1.99

# =====================================================
# PRIVACY AND SECURITY
# =====================================================

# presidio-analyzer: PII detection and analysis
# What: Advanced personally identifiable information detection
# Why: Enterprise-grade privacy protection, customizable rules, multiple languages
# How: Uses NLP models to identify and classify sensitive information
# Alternative: spaCy NER (general), regex patterns (limited), but Presidio is purpose-built
presidio-analyzer>=2.2.0

# presidio-anonymizer: PII anonymization and de-identification
# What: Anonymization engine for sensitive data protection
# Why: Complements analyzer with transformation capabilities
# How: Provides masking, encryption, and replacement strategies
# Alternative: Custom anonymization (complex), cloud services (privacy concerns)
presidio-anonymizer>=2.2.0

# spacy: Industrial-strength Natural Language Processing
# What: Advanced NLP library with pre-trained models
# Why: Required for Presidio, excellent entity recognition, fast processing
# How: Provides tokenization, POS tagging, NER, and dependency parsing
# Alternative: NLTK (academic), CoreNLP (Java), but spaCy is most production-ready
spacy>=3.6.0

# =====================================================
# VISUALIZATION AND REPORTING
# =====================================================

# matplotlib: Comprehensive plotting library
# What: Publication-quality plotting and visualization
# Why: Mature, comprehensive, publication-ready output, extensive customization
# How: Provides figure/axes API for creating static, animated, and interactive plots
# Alternative: plotly (interactive), bokeh (web), but matplotlib is most stable
matplotlib>=3.10.3

# seaborn: Statistical data visualization
# What: High-level statistical plotting interface
# Why: Beautiful default styles, statistical focus, excellent pandas integration
# How: Provides statistical plot types built on matplotlib
# Alternative: plotly express (interactive), altair (grammar of graphics), but seaborn is most intuitive
seaborn>=0.13.2

# =====================================================
# SYSTEM AND ENVIRONMENT MANAGEMENT
# =====================================================

# python-dotenv: Environment variable management
# What: Loads environment variables from .env files
# Why: Secure configuration management, separates config from code
# How: Reads key-value pairs from .env files into environment variables
# Alternative: os.environ (manual), configparser (INI files), but dotenv is most convenient
python-dotenv>=1.1.1

# =====================================================
# FILE FORMAT SUPPORT
# =====================================================

# openpyxl: Excel file reading and writing
# What: Pure Python Excel (.xlsx) file support
# Why: No external dependencies, full Excel feature support, active development
# How: Provides workbook, worksheet, and cell manipulation
# Alternative: xlsxwriter (write-only), pandas ExcelWriter (limited), but openpyxl is most complete
openpyxl>=3.1.5

# =====================================================
# PROGRESS AND MONITORING
# =====================================================

# tqdm: Progress bars for Python loops
# What: Extensible progress meter for loops and long-running operations
# Why: Great user experience, minimal overhead, works everywhere
# How: Wraps iterables to show progress with time estimates
# Alternative: progressbar2, click.progressbar, but tqdm is most feature-complete
tqdm>=4.67.1

# =====================================================
# DEVELOPMENT AND TESTING (Optional)
# =====================================================

# pytest: Testing framework (uncomment for development)
# What: Mature, feature-rich testing framework
# Why: Simple syntax, powerful fixtures, excellent plugin ecosystem
# How: Provides test discovery, assertion introspection, and parametrization
# Alternative: unittest (built-in), nose2 (legacy), but pytest is most popular
# pytest>=7.4.0

# black: Code formatter (uncomment for development)
# What: Uncompromising Python code formatter
# Why: Eliminates code style debates, consistent formatting, fast
# How: Automatically formats Python code to consistent style
# Alternative: autopep8, yapf, but black is most opinionated and consistent
# black>=23.0.0

# isort: Import statement sorter (uncomment for development)
# What: Sorts and organizes Python imports
# Why: Clean, consistent import organization, integrates with black
# How: Automatically sorts imports by type and alphabetically
# Alternative: Manual organization, but isort is much more reliable
# isort>=5.12.0

# mypy: Static type checker (uncomment for development)
# What: Optional static typing for Python
# Why: Catches type-related bugs early, improves code documentation
# How: Analyzes type annotations and infers types where possible
# Alternative: pyright (Microsoft), pyre (Facebook), but mypy is most mature
# mypy>=1.5.0

# =====================================================
# INSTALLATION NOTES
# =====================================================

# GPU Support (Optional):
# For GPU-accelerated translation, install PyTorch with CUDA:
# pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# spaCy Model (Required for Presidio):
# After installation, download the English model:
# python -m spacy download en_core_web_lg

# System Dependencies:
# Some packages may require system-level dependencies:
# - On Ubuntu/Debian: apt-get install build-essential python3-dev
# - On CentOS/RHEL: yum install gcc python3-devel
# - On macOS: xcode-select --install

# Memory Requirements:
# - Minimum: 8GB RAM
# - Recommended: 16GB+ RAM for large datasets
# - GPU: 4GB+ VRAM for translation acceleration

# Python Version:
# - Minimum: Python 3.8
# - Recommended: Python 3.11+ for best performance
# - Maximum tested: Python 3.12